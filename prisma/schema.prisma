generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "relationJoins"]
}

/// Always after the prisma-client-js generator
generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = "postgres://texitcoin:123456789@localhost/texitcoin"
}

model Admin {
  id       String  @id @default(uuid())
  username String  @unique(map: "index_admins_on_username") @db.VarChar
  email    String  @unique(map: "index_admins_on_email") @db.VarChar
  password String  @db.VarChar
  avatar   String? @default("https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRcrrCHjN9kChJVJtWxXCHoUcgEhxWwTclnURuK20T8EDX_rVt0NMik5tYpLhKzqPBnvP0&usqp=CAU")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("admins")
}

model Member {
  id               String  @id @default(uuid())
  username         String  @unique(map: "index_members_on_username") @db.VarChar
  fullName         String  @db.VarChar
  sponsorId        String? @db.VarChar
  userId           Int     @unique(map: "index_members_on_userId") @db.Integer
  email            String  @db.VarChar
  mobile           String  @db.VarChar
  assetId          String  @db.VarChar
  primaryAddress   String  @db.VarChar
  secondaryAddress String? @db.VarChar
  city             String? @db.VarChar
  state            String? @db.VarChar
  zipCode          String? @db.VarChar
  password         String  @default("$2a$12$iJYYra5MuxOQ9AwyG5CQauqCoE0NnSWHb7PzicO2C3L2/0J2VkQaO") @db.VarChar

  sponsor Member? @relation("MemberSponsor", fields: [sponsorId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  sales            Sale[]
  statistics       MemberStatistics[]
  introduceMembers Member[]           @relation("MemberSponsor")
  memberWallets    MemberWallet[]

  @@map("members")
}

model Sale {
  id            String   @id @default(uuid())
  memberId      String
  invoiceNo     Int      @unique(map: "index_sales_on_invoiceNo") @default(0)
  packageId     String
  paymentMethod String
  orderedAt     DateTime @default(now()) @db.Timestamptz(6)
  status        Boolean  @default(true)

  member  Member?  @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  package Package? @relation(fields: [packageId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  statisticsSales StatisticsSale[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([memberId], map: "index_sales_on_memberId")
  @@index([packageId], map: "index_sales_on_packageId")
  @@map("sales")
}

model Statistics {
  id             String  @id @default(uuid())
  newBlocks      Int
  totalBlocks    Int
  totalHashPower Int
  totalMembers   Int?
  status         Boolean @default(true)
  txcShared      Int     @default(0)

  issuedAt DateTime @default(now())
  from     DateTime
  to       DateTime

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  //Relations
  memberStatistics MemberStatistics[]
  statisticsSales  StatisticsSale[]

  @@map("statistics")
}

model MemberStatistics {
  id           String   @id @default(uuid())
  memberId     String
  statisticsId String
  txcShared    Float
  hashPower    Int
  percent      Float
  issuedAt     DateTime @default(now())

  member     Member     @relation(fields: [memberId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  statistics Statistics @relation(fields: [statisticsId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  memberStatisticsWallets MemberStatisticsWallet[]

  @@index([memberId], map: "index_memberStatistics_on_memberId")
  @@index([statisticsId], map: "index_memberStatistics_on_statisticsId")
  @@map("member_statistics")
}

model StatisticsSale {
  id           String @id @default(uuid())
  statisticsId String
  saleId       String

  issuedAt DateTime @default(now())

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  //Relations
  statistics Statistics @relation(fields: [statisticsId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sale       Sale       @relation(fields: [saleId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([statisticsId], map: "index_statisticssale_on_statisticsId")
  @@index([saleId], map: "index_statisticssale_on_saleId")
  @@map("statistics_sale")
}

model Block {
  id         String @id @default(uuid())
  blockNo    Int
  hashRate   Float
  difficulty Float

  issuedAt DateTime @default(now())

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([blockNo], map: "index_blocks_on_block_number")
  @@map("blocks")
}

model Package {
  id          String   @id @default(uuid())
  productName String
  amount      Int
  status      Boolean  @default(true)
  date        DateTime @default(now())
  token       Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // relation
  sales Sale[]

  @@map("packages")
}

model Payout {
  id      String  @id @default(uuid())
  method  String
  status  Boolean @default(true)
  name    String
  display String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // relation
  memberWallets MemberWallet[]

  @@map("payouts")
}

model MemberWallet {
  id       String @id @default(uuid())
  memberId String
  payoutId String
  address  String
  percent  Float  @default(0)

  member Member? @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  payout Payout? @relation(fields: [payoutId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  memberStatisticsWallets MemberStatisticsWallet[]

  @@unique([memberId, payoutId, address, deletedAt], map: "unique_index_on_memberwallets")
  @@map("memberwallets")
}

model MemberStatisticsWallet {
  id                String @id @default(uuid())
  memberStatisticId String
  memberWalletId    String
  txc               Float  @default(0.0)

  memberStatistic MemberStatistics? @relation(fields: [memberStatisticId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  memberWallet    MemberWallet?     @relation(fields: [memberWalletId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("memberstatisticswallets")
}
