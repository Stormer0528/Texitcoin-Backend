generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "relationJoins"]
}

/// Always after the prisma-client-js generator
generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  username String  @unique(map: "index_users_on_username") @db.VarChar
  email    String  @unique(map: "index_users_on_email") @db.VarChar
  password String  @db.VarChar
  isAdmin  Boolean @default(false) @db.Boolean
  avatar   String  @default("https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRcrrCHjN9kChJVJtWxXCHoUcgEhxWwTclnURuK20T8EDX_rVt0NMik5tYpLhKzqPBnvP0&usqp=CAU")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("users")
}

model Member {
  id                 String  @id @default(uuid())
  username           String  @unique(map: "index_members_on_username") @db.VarChar
  fullName           String  @db.VarChar
  sponsorName        String? @db.VarChar
  introducerFullName String? @db.VarChar
  userId             Int     @unique(map: "index_users_on_userId") @db.Integer
  email              String  @db.VarChar
  mobile             String  @db.VarChar
  assetId            String  @db.VarChar
  txcCold            String  @db.VarChar
  address            String  @db.VarChar
  payoutId           String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  sales      Sale[]
  statistics MemberStatistics[]
  Payout     Payout?            @relation(fields: [payoutId], references: [id])

  @@map("members")
}

model Sale {
  id            String   @id @default(uuid())
  memberId      String
  invoiceNo     Int      @unique(map: "index_sales_on_invoiceNo") @default(0)
  packageId     String
  paymentMethod String   @db.VarChar
  orderedAt     DateTime @default(now()) @db.Timestamptz(6)
  status        Boolean  @default(true)

  member  Member?  @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  package Package? @relation(fields: [packageId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([memberId], map: "index_sales_on_memberId")
  @@index([packageId], map: "index_sales_on_packageId")
  @@map("sales")
}

model Statistics {
  id             String  @id @default(uuid())
  newBlocks      Int
  totalBlocks    Int
  totalHashPower Int
  totalMembers   Int?
  status         Boolean @default(true)
  txcShared      Int     @default(0)

  issuedAt DateTime @default(now())
  from     DateTime
  to       DateTime

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  //Relations
  memberStatistics MemberStatistics[]

  @@map("statistics")
}

model MemberStatistics {
  id           String   @id @default(uuid())
  memberId     String
  statisticsId String
  txcShared    Float
  hashPower    Int
  percent      Float
  issuedAt     DateTime @default(now())

  member     Member     @relation(fields: [memberId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  statistics Statistics @relation(fields: [statisticsId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([memberId], map: "index_memberStatistics_on_memberId")
  @@map("member_statistics")
}

model Block {
  id         String @id @default(uuid())
  blockNo    Int
  hashRate   Float
  difficulty Float

  issuedAt DateTime @default(now())

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([blockNo], map: "index_blocks_on_block_number")
  @@map("blocks")
}

model Package {
  id          String   @id @default(uuid())
  productName String
  amount      Int
  status      Boolean  @default(true)
  date        DateTime @default(now())
  token       Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // relation
  sales Sale[]

  @@map("packages")
}

model Payout {
  id      String  @id @default(uuid())
  method  String
  status  Boolean @default(true)
  name    String
  display String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // relation
  members Member[]

  @@map("payouts")
}
